generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  phone          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  account        Account?
  order          Order[]
  productReviews ProductReview[]
  classReviews   ClassReview[]
  reservations   Reservation[]
}

model Account {
  id           Int      @id @default(autoincrement())
  refreshToken String?
  loginAt      DateTime @default(now())
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
}

model Class {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  price         Int
  discount      Int           @default(0)
  description   String
  descImg       String[]
  classDuration Int
  reservation   Reservation[]
  reviews       ClassReview[]
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  price       Int
  discount    Int
  description String
  descImg     String[]
  deliver     Boolean
  categories  String[]
  order       Order[]
  reviews     ProductReview[]
}

model Order {
  orderId   Int      @id @default(autoincrement())
  orderDate DateTime @default(now())
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Reservation {
  id          Int      @id @default(autoincrement())
  reserveDate DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
}

model ProductReview {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  rating    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model ClassReview {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  rating    Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
}
