generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STRANGER
  PUBLIC
  ADMIN
}

model User {
  name           String
  phone          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  email          String          @unique
  id             Int             @id @default(autoincrement())
  updatedAt      DateTime? // 최근 수정일
  deleted        Boolean         @default(false) // 탈퇴 여부
  role           UserRole        @default(PUBLIC) // 유저 롤 (비회원, 회원, 관리자)
  account        Account?
  board          Board?
  classReviews   ClassReview[]
  order          Order[]
  productReviews ProductReview[]
  reservations   Reservation[]
  message        Message[]
}

model Account {
  refreshToken String // 리프레시 토큰
  loginAt      DateTime @default(now()) // 최근 로그인 일시
  address      String[] // 배송지 목록, 추가 할 때마다 unshift 후 최근 배송지는 adress[0]으로 가져오기
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id])
}

model Class {
  name          String        @unique
  price         Int
  discount      Int           @default(0)
  description   String
  classDuration Int // 수업 시간
  descImg       String[]
  id            Int           @id @default(autoincrement())
  reviews       ClassReview[]
  reservation   Reservation[]
}

model Product {
  name        String         @unique
  price       Int
  discount    Int
  description String
  descImg     String[]
  deliver     Boolean // 배송 여부
  categories  String[]
  id          Int            @id @default(autoincrement())
  reviews     ProductReview?
  Order       Order?
}

model Order {
  id             Int      @id @default(autoincrement())
  orderDate      DateTime @default(now()) // 주문 일자
  quantity       Int // 주문 수량
  deliverName    String // 받는사람 성함
  deliverAddress String // 받는사람 주소
  requirement    String // 요청사항
  totalPrice     Int // 총 가격
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  productId      Int      @unique
  product        Product  @relation(fields: [productId], references: [id])
}

model Reservation {
  id          Int      @id @default(autoincrement())
  reserveDate String[]
  regular     Boolean  @default(false)
  deleted Boolean @default(false)
  userId      Int
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ProductReview {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  deleted   Boolean  @default(false)
  userId    Int
  productId Int      @unique
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ClassReview {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  rating    Float
  deleted   Boolean  @default(false)
  userId    Int
  classId   Int
  id        Int      @id @default(autoincrement())
  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// 공지사항
model Board {
  id          Int      @id @default(autoincrement())
  title       String
  type        String
  content     String
  publishedAt DateTime @default(now())
  authorId    Int      @unique
  author      User     @relation(fields: [authorId], references: [id])
}

// 1대1 대화 model

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  messages  Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  text           String
  senderId       Int // 관리자와의 1대1 대화만 있기 때문에 sender만
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
