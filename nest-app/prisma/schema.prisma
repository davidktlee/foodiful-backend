generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name           String
  phone          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  email          String          @unique
  id             Int             @id @default(autoincrement())
  updatedAt      DateTime?
  deleted        Boolean         @default(false)
  role           UserRole        @default(PUBLIC)
  account        Account?
  board          Board?
  classReviews   ClassReview[]
  message        Message[]
  order          Order[]
  productReviews ProductReview[]
  reservations   Reservation[]
}

model Account {
  refreshToken String
  loginAt      DateTime @default(now())
  userId       Int      @unique
  address      String[]
  user         User     @relation(fields: [userId], references: [id])
}

model Class {
  name          String        @unique
  price         Int
  discount      Int           @default(0)
  description   String
  classDuration Int
  descImg       String[]
  id            Int           @id @default(autoincrement())
  reviews       ClassReview[]
  reservation   Reservation[]
}

model Product {
  name        String         @unique
  price       Int
  discount    Int
  description String
  descImg     String[]
  deliver     Boolean
  categories  String[]
  id          Int            @id @default(autoincrement())
  Order       Order?
  reviews     ProductReview?
}

model Order {
  orderDate      DateTime @default(now())
  quantity       Int
  userId         Int
  id             Int      @id @default(autoincrement())
  productId      Int      @unique
  deliverAddress String
  deliverName    String
  requirement    String
  totalPrice     Int
  product        Product  @relation(fields: [productId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

model Reservation {
  userId      Int
  classId     Int
  id          Int     @id @default(autoincrement())
  reserveDate String[]
  deleted     Boolean @default(false)
  class       Class   @relation(fields: [classId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
}

model ProductReview {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  userId    Int
  productId Int      @unique
  id        Int      @id @default(autoincrement())
  deleted   Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ClassReview {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    Boolean  @default(false)
  comment   String
  rating    Float
  userId    Int
  classId   Int
  id        Int      @id @default(autoincrement())
  deleted   Boolean  @default(false)
  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Board {
  id          Int      @id @default(autoincrement())
  title       String
  type        String
  content     String
  publishedAt DateTime @default(now())
  authorId    Int      @unique
  author      User     @relation(fields: [authorId], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  messages  Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  text           String
  senderId       Int
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

enum UserRole {
  PUBLIC
  ADMIN
  STRANGER
}
