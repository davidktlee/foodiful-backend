generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name            String
  phone           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  email           String            @unique
  id              Int               @id @default(autoincrement())
  updatedAt       DateTime?
  deleted         Boolean           @default(false)
  role            UserRole          @default(PUBLIC)
  account         Account?
  board           Board?
  Cart            Cart[]
  favoriteLecture FavoriteLecture?
  favoriteProduct FavoriteProduct[]
  lectureInquiry  LectureInquiry[]
  message         Message[]
  order           Order[]
  productReviews  ProductReview[]
  refund          Refund[]
  reservations    Reservation[]
  recomment       Recomment[]
}

model Account {
  refreshToken String
  loginAt      DateTime @default(now())
  userId       Int      @unique
  address      String[]
  user         User     @relation(fields: [userId], references: [id])
}

model Lecture {
  name            String            @unique
  price           Int
  discount        Int               @default(0)
  subTitle        String
  description     String
  descImg         String[]
  id              Int               @id @default(autoincrement())
  lectureDuration Int
  regular         Boolean
  favoriteLecture FavoriteLecture[]
  inquiry         LectureInquiry[]
  reservation     Reservation[]
}

model FavoriteLecture {
  userId    Int     @unique
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Product {
  name            String            @unique
  price           Int
  discount        Int
  description     String
  descImg         String[]
  deliver         Boolean
  categories      String[]
  id              Int               @id @default(autoincrement())
  subTitle        String
  limitQuantity   Int               @default(0)
  carts           Cart?
  favoriteProduct FavoriteProduct[]
  orderProduct    OrderProduct[]
  reviews         ProductReview[]
}

model FavoriteProduct {
  userId    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, productId])
}

model Order {
  orderDate              DateTime       @default(now())
  quantity               Int
  userId                 Int
  id                     String         @id
  deliverAddress         String
  deliverName            String
  requirement            String?
  totalPrice             Int
  deliverPhone           String
  deliverSpecificAddress String
  orderStatus            OrderStatus    @default(PROCEEDING)
  postalCode             String
  user                   User           @relation(fields: [userId], references: [id])
  orderProduct           OrderProduct[]
  refund                 Refund?
}

model OrderProduct {
  id              Int     @id @default(autoincrement())
  orderCount      Int
  orderPrice      Int
  productId       Int
  orderId         String
  additionalCount Int
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
}

model Reservation {
  userId      Int
  id          Int      @id @default(autoincrement())
  deleted     Boolean  @default(false)
  reserveDate String[]
  lectureId   Int
  lecture     Lecture  @relation(fields: [lectureId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ProductReview {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   String
  userId    Int
  productId Int
  id        Int      @id @default(autoincrement())
  deleted   Boolean  @default(false)
  rating    Int
  reviewImg String?
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([productId, userId])
}

model LectureInquiry {
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  comment   String
  isSecret  Boolean
  userId    Int
  lectureId Int
  id        Int         @id @default(autoincrement())
  deleted   Boolean     @default(false)
  lecture   Lecture     @relation(fields: [lectureId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  recomment Recomment[]
}

model Recomment {
  id        Int            @id @default(autoincrement())
  userId    Int
  parentId  Int
  comment   String
  isSecret  Boolean
  deleted   Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  parent    LectureInquiry @relation(fields: [parentId], references: [id])
}

model Board {
  id          Int      @id @default(autoincrement())
  title       String
  type        String
  content     String
  publishedAt DateTime @default(now())
  authorId    Int      @unique
  author      User     @relation(fields: [authorId], references: [id])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  messages  Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  text           String
  senderId       Int
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Cart {
  id              Int     @id @default(autoincrement())
  userId          Int
  additionalCount Int
  productId       Int     @unique
  quantity        Int
  product         Product @relation(fields: [productId], references: [id])
  user            User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Refund {
  id           Int          @id @default(autoincrement())
  userId       Int
  orderId      String       @unique
  refundAt     DateTime     @default(now())
  refundReason String
  status       RefundStatus @default(PROCEEDING)
  totalPrice   Int
  order        Order        @relation(fields: [orderId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

enum UserRole {
  PUBLIC
  ADMIN
  STRANGER
}

enum OrderStatus {
  PROCEEDING
  COMPLETE
  CANCEL
  SHIPPING
}

enum RefundStatus {
  PROCEEDING
  COMPLETE
}
